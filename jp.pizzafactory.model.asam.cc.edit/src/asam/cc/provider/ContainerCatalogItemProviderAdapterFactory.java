/**
 */
package asam.cc.provider;

import asam.cc.util.ContainerCatalogAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ContainerCatalogItemProviderAdapterFactory extends ContainerCatalogAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ContainerCatalogItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link asam.cc.Catalog} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CatalogItemProvider catalogItemProvider;

    /**
     * This creates an adapter for a {@link asam.cc.Catalog}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCatalogAdapter() {
        if (catalogItemProvider == null) {
            catalogItemProvider = new CatalogItemProvider(this);
        }

        return catalogItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link asam.cc.AdminData} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AdminDataItemProvider adminDataItemProvider;

    /**
     * This creates an adapter for a {@link asam.cc.AdminData}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAdminDataAdapter() {
        if (adminDataItemProvider == null) {
            adminDataItemProvider = new AdminDataItemProvider(this);
        }

        return adminDataItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link asam.cc.Sdg} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SdgItemProvider sdgItemProvider;

    /**
     * This creates an adapter for a {@link asam.cc.Sdg}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSdgAdapter() {
        if (sdgItemProvider == null) {
            sdgItemProvider = new SdgItemProvider(this);
        }

        return sdgItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link asam.cc.SdgCaption} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SdgCaptionItemProvider sdgCaptionItemProvider;

    /**
     * This creates an adapter for a {@link asam.cc.SdgCaption}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSdgCaptionAdapter() {
        if (sdgCaptionItemProvider == null) {
            sdgCaptionItemProvider = new SdgCaptionItemProvider(this);
        }

        return sdgCaptionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link asam.cc.Sd} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SdItemProvider sdItemProvider;

    /**
     * This creates an adapter for a {@link asam.cc.Sd}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSdAdapter() {
        if (sdItemProvider == null) {
            sdItemProvider = new SdItemProvider(this);
        }

        return sdItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link asam.cc.Sdf} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SdfItemProvider sdfItemProvider;

    /**
     * This creates an adapter for a {@link asam.cc.Sdf}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSdfAdapter() {
        if (sdfItemProvider == null) {
            sdfItemProvider = new SdfItemProvider(this);
        }

        return sdfItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link asam.cc.Identifier} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IdentifierItemProvider identifierItemProvider;

    /**
     * This creates an adapter for a {@link asam.cc.Identifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createIdentifierAdapter() {
        if (identifierItemProvider == null) {
            identifierItemProvider = new IdentifierItemProvider(this);
        }

        return identifierItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link asam.cc.ShortNameFragment} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ShortNameFragmentItemProvider shortNameFragmentItemProvider;

    /**
     * This creates an adapter for a {@link asam.cc.ShortNameFragment}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createShortNameFragmentAdapter() {
        if (shortNameFragmentItemProvider == null) {
            shortNameFragmentItemProvider = new ShortNameFragmentItemProvider(this);
        }

        return shortNameFragmentItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link asam.cc.SdgContents} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SdgContentsItemProvider sdgContentsItemProvider;

    /**
     * This creates an adapter for a {@link asam.cc.SdgContents}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSdgContentsAdapter() {
        if (sdgContentsItemProvider == null) {
            sdgContentsItemProvider = new SdgContentsItemProvider(this);
        }

        return sdgContentsItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected StringToStringMapItemProvider stringToStringMapItemProvider;

    /**
     * This creates an adapter for a {@link java.util.Map.Entry}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createStringToStringMapAdapter() {
        if (stringToStringMapItemProvider == null) {
            stringToStringMapItemProvider = new StringToStringMapItemProvider(this);
        }

        return stringToStringMapItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link asam.cc.DocRevision} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DocRevisionItemProvider docRevisionItemProvider;

    /**
     * This creates an adapter for a {@link asam.cc.DocRevision}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDocRevisionAdapter() {
        if (docRevisionItemProvider == null) {
            docRevisionItemProvider = new DocRevisionItemProvider(this);
        }

        return docRevisionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link asam.cc.Modififaction} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ModififactionItemProvider modififactionItemProvider;

    /**
     * This creates an adapter for a {@link asam.cc.Modififaction}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createModififactionAdapter() {
        if (modififactionItemProvider == null) {
            modififactionItemProvider = new ModififactionItemProvider(this);
        }

        return modififactionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link asam.cc.MultiLanguageOverviewParagraph} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected MultiLanguageOverviewParagraphItemProvider multiLanguageOverviewParagraphItemProvider;

    /**
     * This creates an adapter for a {@link asam.cc.MultiLanguageOverviewParagraph}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createMultiLanguageOverviewParagraphAdapter() {
        if (multiLanguageOverviewParagraphItemProvider == null) {
            multiLanguageOverviewParagraphItemProvider = new MultiLanguageOverviewParagraphItemProvider(this);
        }

        return multiLanguageOverviewParagraphItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link asam.cc.LOverviewParagraph} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected LOverviewParagraphItemProvider lOverviewParagraphItemProvider;

    /**
     * This creates an adapter for a {@link asam.cc.LOverviewParagraph}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLOverviewParagraphAdapter() {
        if (lOverviewParagraphItemProvider == null) {
            lOverviewParagraphItemProvider = new LOverviewParagraphItemProvider(this);
        }

        return lOverviewParagraphItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link asam.cc.MultiLanguagePlainText} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected MultiLanguagePlainTextItemProvider multiLanguagePlainTextItemProvider;

    /**
     * This creates an adapter for a {@link asam.cc.MultiLanguagePlainText}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createMultiLanguagePlainTextAdapter() {
        if (multiLanguagePlainTextItemProvider == null) {
            multiLanguagePlainTextItemProvider = new MultiLanguagePlainTextItemProvider(this);
        }

        return multiLanguagePlainTextItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link asam.cc.Ablock} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AblockItemProvider ablockItemProvider;

    /**
     * This creates an adapter for a {@link asam.cc.Ablock}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAblockAdapter() {
        if (ablockItemProvider == null) {
            ablockItemProvider = new AblockItemProvider(this);
        }

        return ablockItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ArefItemProvider arefItemProvider;

    /**
     * This creates an adapter for a {@link java.util.Map.Entry}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createArefAdapter() {
        if (arefItemProvider == null) {
            arefItemProvider = new ArefItemProvider(this);
        }

        return arefItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (catalogItemProvider != null) catalogItemProvider.dispose();
        if (adminDataItemProvider != null) adminDataItemProvider.dispose();
        if (sdgItemProvider != null) sdgItemProvider.dispose();
        if (sdgCaptionItemProvider != null) sdgCaptionItemProvider.dispose();
        if (sdItemProvider != null) sdItemProvider.dispose();
        if (sdfItemProvider != null) sdfItemProvider.dispose();
        if (identifierItemProvider != null) identifierItemProvider.dispose();
        if (shortNameFragmentItemProvider != null) shortNameFragmentItemProvider.dispose();
        if (sdgContentsItemProvider != null) sdgContentsItemProvider.dispose();
        if (stringToStringMapItemProvider != null) stringToStringMapItemProvider.dispose();
        if (docRevisionItemProvider != null) docRevisionItemProvider.dispose();
        if (modififactionItemProvider != null) modififactionItemProvider.dispose();
        if (multiLanguageOverviewParagraphItemProvider != null) multiLanguageOverviewParagraphItemProvider.dispose();
        if (lOverviewParagraphItemProvider != null) lOverviewParagraphItemProvider.dispose();
        if (multiLanguagePlainTextItemProvider != null) multiLanguagePlainTextItemProvider.dispose();
        if (ablockItemProvider != null) ablockItemProvider.dispose();
        if (arefItemProvider != null) arefItemProvider.dispose();
    }

}
